Introduction

The Internet of Things can be realised in many ways: in this assignment, you will build it according to the principles of the Web of Things.

Throughout, you are encouraged to use Docker to contain your system's various components. You are also encouraged to use AU's official GitLab to host your code. In the later part of the assignment, you are expected to host the data collection component in the cloud—there are many to chose from, but Digital Ocean often have good offers for students (as do other cloud providers).

Getting started with Docker on Raspberry Pi may prove useful to you. Pay attention to the section on GPIO in Docker. You should disregard his way of changing the network name of your Raspberry Pi—just run raspi-config.

(The image arm32v6/node:alpine contains a much more recent Node.js, and I would recommend using that as a building block rather than the one in the guide).

I have prepared a disk image for you with Docker already installed.

Michal has created a starting point IoT project, that you might find very helpful.
Milestone 1: Getting Started

The purpose of this milestone is to get started with the Raspberry Pi, as well as your Docker and Node.js skills, if you are a little rusty.

You should wire your components as shown on one of the last slides from the Friday lecture.

Write a Node.js server that through a Web page reports on the state of the sensors on your RPi.

Your system should ideally consist of a single Docker image that can be started on a (sensor connected) RPi, printing the URL that can visited to inspect the state of the sensors.

You should deliver either a zip-file, or, better, a file consisting of the necessary git command to clone your repository.

There should be a README.md file in the root with instructions.

Deadline: 23:59 9/Sept/2018
Milestone 2: Inspecting & Adjusting

The purpose of this milestone is implement the Web of Things model in a REST API.

You should provide a properly structured REST API for the sensors (and LEDs) attached to your RPi, following the design guidelines from the WoT book.

You should create a Web page that dynamically, through your REST API, retrieves the information as well as enables the control of LEDs.

Deadline: Ultimo W37
Milestone 3: Storing & Retrieving

The purpose of this milestone is to hook up your system, through MQTT, to cloud storage.

Create a storage component, hosted on a public accessible cloud server that can retrieve sensor data from your RPi over MQTT.

Your Docker image on the RPi should, upon start, connect to a MQTT broker running on your cloud server.

Your cloud instance should also host a Web page that retrieves and displays the collected data, as well as enabling control of LEDs on the RPi.

Deadline: Ultimo W38

